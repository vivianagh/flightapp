spring:
  application:
    name: flight-app

  datasource:
    url: jdbc:postgresql://localhost:5432/flights_db
    username: postgres
    password: postgres

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql:true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true   # útil si tu schema ya tiene tablas previas
    default-schema: public      # explícito por si el search_path no apunta a public
    schemas: public
  logging:
    level:
      org.flywaydb: INFO
      i.g.v.flightapp.services.RouteResolverServiceImpl: DEBUG

  kafka:
    bootstrap-servers: localhost:29092
    properties:
      schema.registry.url: http://localhost:8081
      specific.avro.reader: true
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://localhost:8081
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://localhost:8081
        specific.avro.reader: true

kafka:
  topic:
    rawFlights: raw-flights
    completedFlights: flights-completed
    flightsOverHome: flights-over-home
    flightsUpdate: flights-update
    deadLetter: flights-dlq

external:
  aerodatabox:
    baseUrl: https://aerodatabox.p.rapidapi.com
    apiKey: ${AERODATABOX_API_KEY:}
    host: aerodatabox.p.rapidapi.com

logging:
  level:
    com.flight-app: DEBUG
    org.springframework.web.client.RestClient: INFO

routes:
  batch-size: 10         # antes era 150
  sleep-ms: 1200         # pausa entre requests (1.2s)
  cooldown-seconds: 3600 # si no viene Retry-After, entrar en cooldown 1h



