
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      # comprueba que ZK responda usando zookeeper-shell
      test: ["CMD-SHELL", "echo 'ls /' | zookeeper-shell localhost:2181 > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"    # expone puerto interno 9092 al externo 9092 (para docker)
      - "29092:29092"  # expone puerto interno 29092 al externo 29092 (para tu máquina local)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      # lista topics para validar broker
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8081/subjects || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9000 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: flights_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d flights_db"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s

# ---------- Backend API ----------
  backend:
    build:
      context: ./flightapp
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - kafka
      - schema-registry
    ports:
      - 8080:8080
    environment:
      # DB (red interna de Docker)
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/flights_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      AERODATABOX_API_KEY: ${AERODATABOX_API_KEY}

      # Kafka + Schema Registry 
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081

      # Lector de socket (antena en el host; desactívalo si no lo usas aún)
      FLIGHT_SOCKET_ENABLED: "true"
      FLIGHT_SOCKET_HOST: "192.168.8.236"
      FLIGHT_SOCKET_PORT: "30003"
      FLIGHT_SOCKET_CONNECT_TIMEOUT_MS: "3000"
      FLIGHT_SOCKET_READ_TIMEOUT_MS: "5000"
      FLIGHT_SOCKET_RECONNECT_BACKOFF_MS: "1000"
    healthcheck:
      # TCP a 8080 (no dependemos de actuator)
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/8080'"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 40s

  # ---------- Frontend (Angular + Nginx) ----------
  frontend:
    build:
      context: ./flight-tracker-ui
      dockerfile: Dockerfile
    depends_on:
      - backend
    ports:
      - 8088:80    # usa 8088 en el host (evita conflicto con Apache/80)
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s

volumes:
  pgdata: {}
  pgadmin_data: {}